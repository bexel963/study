/*
	- 많은 STL 함수들이 결과를 출력 이터레이터가 지시하는 위치로 보낸다는 점에서 copy()와 비슷하다.

			copy(casts, casts + 10, dice.begin());

	- copy() dice가 그 값들을 저장할 수 있는 충분한 공간을 가지고 있다고 가정한다. 즉, copy()는 목적지로 보내지는 정보의 크기에 맞게			
	  목적지의 크기를 자동으로 조정하지 않는다.
	  dice가 얼마나 커야 할지 모른다거나, dice의 기존 원소들 위에 쓰지 않고, 원소들을 추가하기를 원한다고 가정하자.
	  삽입 이터레이터는 복사 과정을 삽입 과정으로 변환함으로써 이 문제를 해결한다.
	  삽입은 기존 데이터 위에 쓰지 않고 새 원소들을 추가하며, 자동 메모리 대입을 사용하여 새 정보에 꼭 맞는 공간을 확보한다.
	  back_insert_iterator, front_insert_iterator, insert_iterator 이 세가지는 모두 출력 컨테이너 개념의 모델들이다.
*/